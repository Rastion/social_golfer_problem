{
    "entry_point": "social_golfer_problem:SocialGolferProblem",
    "default_params": {
      "instance_file": "instances/c_4_3_3.in"
    },
    "problem_type": "Social Golfer Scheduling",
    "description": "In the Social Golfer problem, golfers are grouped every week so that they play together in small groups. The goal is to schedule m groups of n golfers over p weeks while minimizing redundant meetings (i.e. ensuring that each pair of golfers meets at most once). The instance file consists of three numbers: the number of groups, the group size, and the number of weeks. The total number of golfers is the product of the first two numbers.",
    "keywords": [
      "social golfer",
      "scheduling",
      "combinatorial",
      "optimization",
      "tournament"
    ],
    "data_format": {
      "instance_file": {
        "format": "A single line with three integers: number of groups, group size, and number of weeks."
      }
    },
    "decision_variables": {
      "schedule": {
        "type": "list of lists of lists of int",
        "description": "A schedule is represented as a list of weeks. Each week is a list of groups, and each group is a list of golfer indices (integers from 0 to nb_golfers-1). In each week every golfer must appear exactly once."
      }
    },
    "objective": {
      "type": "minimization",
      "function": "Total redundant meetings = Î£(max(0, meetings(gf_i, gf_j) - 1)) over all golfer pairs",
      "description": "Minimize the sum of redundant meetings. For each pair of golfers, any meeting beyond the first is considered redundant."
    },
    "solution_representation": "A list of weeks, each week a list of groups, each group a list of golfer indices.",
    "compatible_optimizers": [
      "genetic_algorithm",
      "simulated_annealing",
      "particle_swarm",
      "tabu_search",
      "rl_optimizer"
    ]
  }
  